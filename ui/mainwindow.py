# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.10.1
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/psychsim.gif"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setUnifiedTitleAndToolBarOnMac(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.graphicsView.sizePolicy().hasHeightForWidth())
        self.graphicsView.setSizePolicy(sizePolicy)
        self.graphicsView.setRenderHints(QtGui.QPainter.Antialiasing|QtGui.QPainter.TextAntialiasing)
        self.graphicsView.setDragMode(QtWidgets.QGraphicsView.RubberBandDrag)
        self.graphicsView.setObjectName("graphicsView")
        self.horizontalLayout.addWidget(self.graphicsView)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 25))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuTools = QtWidgets.QMenu(self.menubar)
        self.menuTools.setObjectName("menuTools")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setEnabled(False)
        self.actionNew.setObjectName("actionNew")
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionRecent_Files = QtWidgets.QAction(MainWindow)
        self.actionRecent_Files.setEnabled(False)
        self.actionRecent_Files.setObjectName("actionRecent_Files")
        self.actionUndo = QtWidgets.QAction(MainWindow)
        self.actionUndo.setEnabled(False)
        self.actionUndo.setObjectName("actionUndo")
        self.actionRedo = QtWidgets.QAction(MainWindow)
        self.actionRedo.setEnabled(False)
        self.actionRedo.setObjectName("actionRedo")
        self.actionCut = QtWidgets.QAction(MainWindow)
        self.actionCut.setEnabled(False)
        self.actionCut.setObjectName("actionCut")
        self.actionCopy = QtWidgets.QAction(MainWindow)
        self.actionCopy.setEnabled(False)
        self.actionCopy.setObjectName("actionCopy")
        self.actionPaste = QtWidgets.QAction(MainWindow)
        self.actionPaste.setEnabled(False)
        self.actionPaste.setObjectName("actionPaste")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setEnabled(False)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_As = QtWidgets.QAction(MainWindow)
        self.actionSave_As.setEnabled(False)
        self.actionSave_As.setObjectName("actionSave_As")
        self.actionClose = QtWidgets.QAction(MainWindow)
        self.actionClose.setEnabled(False)
        self.actionClose.setObjectName("actionClose")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.groupColor = QtWidgets.QActionGroup(MainWindow)
        self.actionAgent = QtWidgets.QAction(MainWindow)
        self.actionAgent.setCheckable(True)
        self.actionAgent.setChecked(True)
        self.actionAgent.setObjectName("actionAgent")
        self.actionAgent.setActionGroup(self.groupColor)
        self.actionLikelihood = QtWidgets.QAction(MainWindow)
        self.actionLikelihood.setCheckable(True)
        self.actionLikelihood.setObjectName("actionLikelihood")
        self.actionLikelihood.setActionGroup(self.groupColor)
        self.actionStep = QtWidgets.QAction(MainWindow)
        self.actionStep.setObjectName("actionStep")
        self.actionMap = QtWidgets.QAction(MainWindow)
        self.actionMap.setEnabled(False)
        self.actionMap.setObjectName("actionMap")
        self.actionScreenshot = QtWidgets.QAction(MainWindow)
        self.actionScreenshot.setObjectName("actionScreenshot")
        self.groupCyclic = QtWidgets.QActionGroup(MainWindow)
        self.actionGround_Truth = QtWidgets.QAction(MainWindow)
        self.actionGround_Truth.setCheckable(True)
        self.actionGround_Truth.setObjectName("actionGround_Truth")
        self.actionGround_Truth.setActionGroup(self.groupCyclic)
        self.actionAcyclical = QtWidgets.QAction(MainWindow)
        self.actionAcyclical.setCheckable(True)
        self.actionAcyclical.setChecked(True)
        self.actionAcyclical.setObjectName("actionAcyclical")
        self.actionAcyclical.setActionGroup(self.groupCyclic)
        self.actionBeliefs = QtWidgets.QAction(MainWindow)
        self.actionBeliefs.setCheckable(True)
        self.actionBeliefs.setObjectName("actionBeliefs")
        self.actionSubgraphs = QtWidgets.QAction(MainWindow)
        self.actionSubgraphs.setObjectName("actionSubgraphs")
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionRecent_Files)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_As)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionClose)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionCut)
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionPaste)
        self.menuView.addAction(self.actionAgent)
        self.menuView.addAction(self.actionLikelihood)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionAcyclical)
        self.menuView.addAction(self.actionGround_Truth)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionBeliefs)
        self.menuTools.addAction(self.actionStep)
        self.menuTools.addAction(self.actionScreenshot)
        self.menuTools.addAction(self.actionMap)
        self.menuTools.addAction(self.actionSubgraphs)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "PsychSim"))
        self.menuFile.setTitle(_translate("MainWindow", "Fi&le"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuView.setTitle(_translate("MainWindow", "&View"))
        self.menuTools.setTitle(_translate("MainWindow", "Tools"))
        self.actionNew.setText(_translate("MainWindow", "&New"))
        self.actionNew.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionOpen.setText(_translate("MainWindow", "&Open"))
        self.actionOpen.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionRecent_Files.setText(_translate("MainWindow", "&Recent Files"))
        self.actionUndo.setText(_translate("MainWindow", "&Undo"))
        self.actionUndo.setShortcut(_translate("MainWindow", "Ctrl+Z"))
        self.actionRedo.setText(_translate("MainWindow", "&Redo"))
        self.actionRedo.setShortcut(_translate("MainWindow", "Ctrl+Y"))
        self.actionCut.setText(_translate("MainWindow", "&Cut"))
        self.actionCut.setShortcut(_translate("MainWindow", "Ctrl+X"))
        self.actionCopy.setText(_translate("MainWindow", "C&opy"))
        self.actionCopy.setShortcut(_translate("MainWindow", "Ctrl+C"))
        self.actionPaste.setText(_translate("MainWindow", "&Paste"))
        self.actionPaste.setShortcut(_translate("MainWindow", "Ctrl+V"))
        self.actionSave.setText(_translate("MainWindow", "&Save"))
        self.actionSave.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionSave_As.setText(_translate("MainWindow", "Sa&ve As"))
        self.actionClose.setText(_translate("MainWindow", "&Close"))
        self.actionClose.setShortcut(_translate("MainWindow", "Ctrl+W"))
        self.actionQuit.setText(_translate("MainWindow", "&Quit"))
        self.actionQuit.setToolTip(_translate("MainWindow", "&Quit"))
        self.actionQuit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.actionAgent.setText(_translate("MainWindow", "&Agent"))
        self.actionAgent.setToolTip(_translate("MainWindow", "Color code nodes by agent correspondence"))
        self.actionLikelihood.setText(_translate("MainWindow", "&Likelihood"))
        self.actionLikelihood.setToolTip(_translate("MainWindow", "Color code nodes by relative likelihood"))
        self.actionStep.setText(_translate("MainWindow", "&Step"))
        self.actionMap.setText(_translate("MainWindow", "&Map"))
        self.actionMap.setToolTip(_translate("MainWindow", "Show map view of scenario"))
        self.actionScreenshot.setText(_translate("MainWindow", "S&creenshot"))
        self.actionGround_Truth.setText(_translate("MainWindow", "&Cyclical"))
        self.actionGround_Truth.setIconText(_translate("MainWindow", "Cyclical"))
        self.actionGround_Truth.setToolTip(_translate("MainWindow", "Show cyclical view of graph"))
        self.actionAcyclical.setText(_translate("MainWindow", "Ac&yclical"))
        self.actionBeliefs.setText(_translate("MainWindow", "&Beliefs"))
        self.actionSubgraphs.setText(_translate("MainWindow", "Subgraphs"))

import psychsim.ui.psychsim_rc
