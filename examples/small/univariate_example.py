# coding=utf-8from math import *import randomfrom agent import Agentfrom helper_functions import get_univariate_samples, tree_from_univariate_samplesfrom pwl import makeTreefrom world import Worlddef mean(samples):    sum_samples = 0.0    for sample in samples:        sum_samples += sample[1]    return sum_samples / len(samples)class UnivariateExample:    def __init__(self, name, symbol, func, max_x, num_samples):        self.max_x = max_x        max_sample_x = self.max_x * 2        self.symbol = symbol        self.func = func        self.name = name        self.world = World()        self.agent = Agent('The Agent')        self.world.addAgent(self.agent)        self.world.setOrder([self.agent])        self.result = self.world.defineState(self.agent.name, 'result', float, lo=0, hi=func(max_sample_x))        self.var = self.world.defineState(self.agent.name, 'var', float, lo=0, hi=self.max_x)        self.world.addDependency(self.result, self.var)        action = self.agent.addAction({'verb': 'operation', 'action': name})        samples = get_univariate_samples(func, 1, max_sample_x + 1, num_samples)        self.sample_mean = mean(samples)        tree = makeTree(tree_from_univariate_samples(self.result, self.var, samples, 0, num_samples - 1))        self.world.setDynamics(self.result, action, tree)    def run_it(self):        se = 0.0        max_se = 0.0        print "*************************************"        print "Testing " + self.name + " function"        for d in range(self.max_x):            x = random.random() * self.max_x + 1            self.world.setFeature(self.var, x)            self.world.step()            print "_____________________________________"            print "Calculating:     " + self.symbol + " " + str(x)            real = self.func(x)            print "Expected result: " + str(real)            psych = float(str(self.world.getFeature(self.result)).replace("100%\t", ""))            print "PsychSim result: " + str(psych)            se += (real - psych) ** 2            max_se += (real - self.sample_mean) ** 2        rmse = (se / self.max_x) ** 0.5        max_rmse = (max_se / self.max_x) ** 0.5        print "====================================="        print "RMSE      = " + str(rmse)        print "RMSE_MAX  = " + str(max_rmse)        print "_____________________________________"        print "RMSE_NORM = " + str(rmse / max_rmse)        print "*************************************"def sqrt(x):    return x ** (.5)def lg(x):    if (x == 0): return float('nan')    return log(x)def cube(x):    return x * x * xUnivariateExample("root", 'âˆš', sqrt, 20, 100).run_it()UnivariateExample("log", 'log', lg, 20, 100).run_it()UnivariateExample("cube", '^3', cube, 20, 100).run_it()