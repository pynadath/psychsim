import randomfrom agent import Agentfrom helper_functions import setToMultiplyMatrix, get_bivariate_samples, tree_from_bivariate_samplesfrom pwl import makeTreefrom world import Worlddef mult(x, y):    return x * ydef mean(samples):    sum_samples = 0.0    for sample_y in samples:        for sample in sample_y:            sum_samples += sample[2]    return sum_samples / len(samples)num_x = 10num_y = 10num_samples = 100world = World()agent = Agent('The Agent')world.addAgent(agent)world.setOrder([agent])var_x = world.defineState(agent.name, 'var_x', float, lo=0, hi=num_x)var_y = world.defineState(agent.name, 'var_y', float, lo=0, hi=num_y)result1 = world.defineState(agent.name, 'result1', float, lo=0, hi=mult(num_x, num_y))result2 = world.defineState(agent.name, 'result2', float, lo=0, hi=mult(num_x, num_y))world.addDependency(result2, var_x)world.addDependency(result2, var_y)world.addDependency(result1, var_x)world.addDependency(result1, var_y)# multiplication using denominator approximationmultiply = agent.addAction({'verb': 'operation', 'action': 'multiply'})tree1 = makeTree(setToMultiplyMatrix(result1, var_x, var_y, 1.0 / num_samples))world.setDynamics(result1, multiply, tree1)# multiplication using linear samplingsamples = get_bivariate_samples(    mult, 0, num_x, 0, num_y, num_samples, num_samples)sample_mean = mean(samples)tree2 = makeTree(tree_from_bivariate_samples(    result2, var_x, var_y, samples, 0, num_samples - 1, 0, num_samples - 1))world.setDynamics(result2, multiply, tree2)se_1 = 0.0se_2 = 0.0max_se = 0.0for i in range(num_x * num_y):    x = random.random() * num_x    world.setFeature(var_x, x)    y = random.random() * num_y    world.setFeature(var_y, y)    world.step()    print "_____________________________________"    print "Calculating:                  " + str(x) + "x" + str(y)    real = x * y    print "Expected result:              " + str(real)    result_1 = float(str(world.getFeature(result1)).replace("100%\t", ""))    print "PsychSim den. approx. result: " + str(result_1)    se_1 += (real - result_1) ** 2    result_2 = float(str(world.getFeature(result2)).replace("100%\t", ""))    print "PsychSim lin. samp. result:   " + str(result_2)    se_2 += (real - result_2) ** 2    max_se += (real - sample_mean) ** 2num_samples = num_x * num_yrmse_1 = (se_1 / num_samples) ** 0.5rmse_2 = (se_2 / num_samples) ** 0.5max_rmse = (max_se / num_samples) ** 0.5print "====================================="print "RMSE_1      = " + str(rmse_1)print "RMSE_2      = " + str(rmse_2)print "RMSE_MAX    = " + str(max_rmse)print "_____________________________________"print "RMSE_NORM_1 = " + str(rmse_1 / max_rmse)print "RMSE_NORM_2 = " + str(rmse_2 / max_rmse)